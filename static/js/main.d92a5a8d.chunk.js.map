{"version":3,"sources":["components/listItems.js","store/actions/listActions.js","components/addItem.js","App.js","serviceWorker.js","store/reducers/listReducer.js","store/reducers/index.js","index.js"],"names":["connect","state","list","dispatch","launchEditor","id","type","deleteItem","props","listItems","editItemStatus","items","length","map","listItem","className","key","task","isUserEditing","aria-hidden","onClick","AddItem","handleChangeInitialized","isCurrentItemInitialized","uuid","handleChange","e","currentItem","setState","target","value","handleSubmit","preventDefault","console","log","saveEdit","this","onSubmit","onChange","defaultValue","Component","addItem","item","App","title","Boolean","window","location","hostname","match","remainingItems","initState","listReducer","action","concat","filter","selectedItem","find","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d92a5a8d.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport uuid from 'uuid';\n\nimport { launchEditor, deleteItem } from '../store/actions/listActions';\n\nconst ListItems = (props) => {\n  const { listItems } = props;\n  const { editItemStatus } = props;\n  const { deleteItem } = props;\n  const { launchEditor } = props;\n  const editClicked = (id) => {\n    launchEditor(id);\n  }\n  const deleteClicked = (id) => {\n    deleteItem(id)\n  }\n  const items = listItems.length ? (\n    listItems.map(listItem => {\n    return (\n      <li className=\"list-group-item\" key={listItem.id}>\n        {listItem.task}\n        { editItemStatus.isUserEditing ? (\n          <span></span>\n        ) : (\n          <span className=\"float-right\">\n            <i className=\"fa fa-pencil text-secondary\" aria-hidden=\"true\" onClick={ () => editClicked(listItem.id) }></i>&nbsp;\n            <i className=\"fa fa-trash-o text-danger\" aria-hidden=\"true\" onClick={ () => deleteClicked(listItem.id) }></i>\n          </span>\n        )}\n      </li>\n    ) \n  })\n  ) : (\n    <li className=\"list-group-item\">\n      All tasks completed\n    </li>\n  )\n\n  return (\n    <ul className=\"list-group list-group-flush\">\n      { items }\n    </ul>\n\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state.list\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    launchEditor: (id) => dispatch(launchEditor(id)),\n    deleteItem: (id) => dispatch(deleteItem(id))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItems);","export const addItem = (item) => {\n  return {\n    type: 'ADD_ITEM',\n    item\n  }\n}\n\nexport const deleteItem = (id) => {\n  return {\n    type: 'DELETE_ITEM',\n    id\n  }\n}\n\nexport const launchEditor = (id) => {\n  return {\n    type: 'LAUNCH_EDITOR',\n    id\n  }\n}\n\nexport const saveEdit = (item) => {\n  return {\n    type: 'SAVE_EDIT',\n    item\n  }\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport { addItem, saveEdit } from '../store/actions/listActions';\nimport { render } from '@testing-library/react';\nimport uuid from 'uuid';\n\nclass AddItem extends Component {\n  currentItem;\n  handleChangeInitialized = false;\n  isCurrentItemInitialized = true;\n  state = {\n    id: uuid(),\n    task: ''\n  }\n\n  handleChange = (e) => {\n    this.handleChangeInitialized = true;\n    this.isCurrentItemInitialized = false;\n    this.currentItem = this.state.task;\n    this.setState({\n      task: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.currentItem);\n    if (!this.handleChangeInitialized) {\n      this.props.saveEdit({\n        id: this.state.id,\n        task: this.currentItem\n      });\n    }\n    else {\n      this.props.saveEdit(this.state);\n    }\n    this.setState({\n      id: uuid(),\n      task: ''\n    })\n    this.handleChangeInitialized = false;\n    this.isCurrentItemInitialized = true;\n  }\n  render() {\n    const { list } = this.props;\n    this.currentItem = list.editItemStatus.currentItem;\n    return (\n        <div className=\"col-md-3\">\n        { list.editItemStatus.isUserEditing ?\n          <div className=\"card\">\n            <div className=\"card-header\">\n              Save Task\n            </div>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"form-group\">\n                <input type=\"text\" className=\"form-control\" id=\"add-task\" onChange={this.handleChange} defaultValue={this.currentItem} value={(this.isCurrentItemInitialized ? this.currentItem : this.state.task)}/>\n              </div>\n              <button type=\"submit\" className=\"btn btn-outline-success\">\n                <i className=\"fa fa-save\"></i>\n              </button>\n            </form>\n          </div> :\n          <div className=\"card\">\n            <div className=\"card-header\">\n              Add Task\n            </div>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"form-group\">\n                <input type=\"text\" className=\"form-control\" id=\"add-task\" onChange={this.handleChange} value={this.state.task}/>\n              </div>\n              <button type=\"submit\" className=\"btn btn-outline-primary\">\n                +\n              </button>\n            </form>\n          </div> \n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state.list\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addItem: (listItem) => dispatch(addItem(listItem)),\n    saveEdit: (listItem) => dispatch(saveEdit(listItem))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport ListItems from './components/listItems'\nimport AddItem from './components/addItem'\nimport { addItem } from './store/actions/listActions';\n\nclass App extends Component {\n  render() {\n    const { list } = this.props;\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <br/>\n          <div className=\"row\">\n            <div className=\"col-md-6 offset-md-2\">\n              <div className=\"card\">\n                <div className=\"card-header\">\n                  {list.title}\n                </div>\n                <ListItems listItems={list.listItems} editItemStatus={list.editItemStatus}/>\n              </div>\n            </div>\n            <AddItem />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state.list\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import uuid from 'uuid';\n\nconst initState = {\n  title: 'Things to do today',\n  listItems: [\n    {\n      id: uuid(),\n      task: 'Buy milk',\n    },\n    {\n      id: uuid(),\n      task: 'Clean kitchen',\n    },\n    {\n      id: uuid(),\n      task: 'Make bed'\n    }\n  ],\n  editItemStatus: {\n    isUserEditing: false,\n    id: uuid(),\n    currentItem: ''\n  }\n}\n\nlet remainingItems;\n\nconst listReducer = (state = initState, action) => {\n  switch(action.type) {\n    case 'ADD_ITEM':\n      return {\n        ...state,\n        listItems: state.listItems.concat(action.item)\n      }\n    case 'LAUNCH_EDITOR':\n      remainingItems = state.listItems.filter(listItem => {\n        return action.id !== listItem.id\n      });\n      let selectedItem = state.listItems.find(item => item.id === action.id);\n      return {\n        ...state,\n        listItems: remainingItems,\n        editItemStatus: {\n          isUserEditing: true,\n          id: uuid(),\n          currentItem: selectedItem.task\n        }\n      }\n    case 'SAVE_EDIT':\n      return {\n        ...state,\n        listItems: state.listItems.concat(action.item),\n        editItemStatus: {\n          isUserEditing: false\n        }\n      }\n    case 'DELETE_ITEM':\n      remainingItems = state.listItems.filter(listItem => {\n        return action.id !== listItem.id\n      });\n      return {\n        ...state,\n        listItems: remainingItems\n      }\n    default:\n      return state\n  }\n}\n\nexport default listReducer;","import { combineReducers } from 'redux';\n\nimport listReducer from './listReducer';\n\nconst rootReducer = combineReducers({\n  list: listReducer\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport listReducer from './store/reducers';\n\nconst store = createStore(\n  listReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}